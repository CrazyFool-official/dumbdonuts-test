{"ast":null,"code":"var _jsxFileName = \"/Users/kim/Desktop/dumb_donuts/frontend_base_dapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef, Component } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport styled from \"styled-components\";\nimport { create } from \"ipfs-http-client\";\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Div, StyleReset, ThemeProvider, Button, Text, Container } from \"atomize\";\nimport Home from \"./Home\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst debug = process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine(); // Create a client engine instance\n\nconst engine = new Styletron();\nconst theme = {\n  colors: {\n    black900: \"#1d1d1e\"\n  }\n};\n\nfunction App() {\n  _s();\n\n  // blockchain stuff\n  const dispatch = useDispatch();\n  const blockchain = useSelector(state => state.blockchain);\n  const data = useSelector(state => state.data);\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.dumbDonuts, dispatch]);\n  return /*#__PURE__*/_jsxDEV(StyletronProvider, {\n    value: engine,\n    debug: debug,\n    debugAfterHydration: true,\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(StyleReset, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        shadow: \"3\",\n        hoverShadow: \"4\",\n        rounded: \"xl\",\n        p: \"1rem\",\n        align: \"center\",\n        onClick: e => {\n          e.preventDefault();\n          dispatch(connect());\n        },\n        children: \"Connect to MetaMask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"83P95pPiMV6KJNec4AGGGzUg8y0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n/*\nreturn (\n  <s.Screen>\n    {blockchain.account === \"\" || blockchain.dumbDonuts === null ? (\n      <s.Container flex={1} ai={\"center\"} jc={\"center\"}>\n        <s.TextTitle>Dumb Donuts</s.TextTitle>\n        <s.SpacerSmall />\n        <StyledButton\n          onClick={(e) => {\n            e.preventDefault();\n            dispatch(connect());\n          }}\n        >\n          Connect to MetaMask\n        </StyledButton>\n        <s.SpacerSmall />\n        {blockchain.errorMsg !== \"\" ? (\n          <s.TextDescription>{blockchain.errorMsg}</s.TextDescription>\n        ) : null}\n      </s.Container>\n    ) : (\n      <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n        <s.TextTitle style={{ textAlign: \"center\" }}>\n          {data.name}\n        </s.TextTitle>\n      </s.Container>\n    )}\n  </s.Screen>\n);\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kim/Desktop/dumb_donuts/frontend_base_dapp/src/App.js"],"names":["React","useEffect","useState","useRef","Component","useDispatch","useSelector","connect","fetchData","styled","create","Provider","StyletronProvider","DebugEngine","Client","Styletron","Div","StyleReset","ThemeProvider","Button","Text","Container","Home","debug","process","env","NODE_ENV","engine","theme","colors","black900","App","dispatch","blockchain","state","data","account","smartContract","dumbDonuts","e","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,sCAAxB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAQ,IAAIC,iBAArB,EAAwCC,WAAxC,QAA2D,iBAA3D;AACA,SAASC,MAAM,IAAIC,SAAnB,QAAoC,yBAApC;AACA,SAASC,GAAT,EAAcC,UAAd,EAA0BC,aAA1B,EAAyCC,MAAzC,EAAiDC,IAAjD,EAAuDC,SAAvD,QAAwE,SAAxE;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,KAAK,GACTC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,KAAK,CAA7C,GAAiD,IAAIb,WAAJ,EADnD,C,CAGA;;AACA,MAAMc,MAAM,GAAG,IAAIZ,SAAJ,EAAf;AAEA,MAAMa,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE;AADJ;AADI,CAAd;;AAMA,SAASC,GAAT,GAAe;AAAA;;AAEb;AACA,QAAMC,QAAQ,GAAG3B,WAAW,EAA5B;AACA,QAAM4B,UAAU,GAAG3B,WAAW,CAAE4B,KAAD,IAAWA,KAAK,CAACD,UAAlB,CAA9B;AACA,QAAME,IAAI,GAAG7B,WAAW,CAAE4B,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAxB;AAEAlC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgC,UAAU,CAACG,OAAX,KAAuB,EAAvB,IAA6BH,UAAU,CAACI,aAAX,KAA6B,IAA9D,EAAoE;AAClEL,MAAAA,QAAQ,CAACxB,SAAS,CAACyB,UAAU,CAACG,OAAZ,CAAV,CAAR;AACD;AACF,GAJQ,EAIN,CAACH,UAAU,CAACK,UAAZ,EAAwBN,QAAxB,CAJM,CAAT;AAME,sBAEE,QAAC,iBAAD;AAAmB,IAAA,KAAK,EAAEL,MAA1B;AAAkC,IAAA,KAAK,EAAEJ,KAAzC;AAAgD,IAAA,mBAAmB,MAAnE;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEK,KAAtB;AAAA,8BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,MAAD;AAAQ,QAAA,MAAM,EAAC,GAAf;AAAmB,QAAA,WAAW,EAAC,GAA/B;AAAmC,QAAA,OAAO,EAAC,IAA3C;AAAgD,QAAA,CAAC,EAAC,MAAlD;AAAyD,QAAA,KAAK,EAAC,QAA/D;AAAwE,QAAA,OAAO,EAAGW,CAAD,IAAO;AAACA,UAAAA,CAAC,CAACC,cAAF;AAAoBR,UAAAA,QAAQ,CAACzB,OAAO,EAAR,CAAR;AAAqB,SAAlI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UAFF;AAYH;;GAzBQwB,G;UAGU1B,W,EACEC,W,EACNA,W;;;KALNyB,G;AA4BT,eAAeA,GAAf;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useState, useRef, Component } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport styled from \"styled-components\";\nimport { create } from \"ipfs-http-client\";\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Div, StyleReset, ThemeProvider, Button, Text, Container } from \"atomize\";\nimport Home from \"./Home\"\n\nconst debug =\n  process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine();\n\n// Create a client engine instance\nconst engine = new Styletron();\n\nconst theme = {\n  colors: {\n    black900: \"#1d1d1e\"\n  }\n};\n\nfunction App() {\n\n  // blockchain stuff\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n  \n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.dumbDonuts, dispatch]);\n\n    return (\n      \n      <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n        <ThemeProvider theme={theme}>\n          <StyleReset />\n            <Home />\n            <Button shadow=\"3\" hoverShadow=\"4\" rounded=\"xl\" p=\"1rem\" align=\"center\" onClick={(e) => {e.preventDefault(); dispatch(connect());}}>\n            Connect to MetaMask\n            </Button>\n        </ThemeProvider>\n      </StyletronProvider>\n    );\n}\n\n\nexport default App;\n\n  /*\n  return (\n    <s.Screen>\n      {blockchain.account === \"\" || blockchain.dumbDonuts === null ? (\n        <s.Container flex={1} ai={\"center\"} jc={\"center\"}>\n          <s.TextTitle>Dumb Donuts</s.TextTitle>\n          <s.SpacerSmall />\n          <StyledButton\n            onClick={(e) => {\n              e.preventDefault();\n              dispatch(connect());\n            }}\n          >\n            Connect to MetaMask\n          </StyledButton>\n          <s.SpacerSmall />\n          {blockchain.errorMsg !== \"\" ? (\n            <s.TextDescription>{blockchain.errorMsg}</s.TextDescription>\n          ) : null}\n        </s.Container>\n      ) : (\n        <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n          <s.TextTitle style={{ textAlign: \"center\" }}>\n            {data.name}\n          </s.TextTitle>\n        </s.Container>\n      )}\n    </s.Screen>\n  );\n  */\n"]},"metadata":{},"sourceType":"module"}