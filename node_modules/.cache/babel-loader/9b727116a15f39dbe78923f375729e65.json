{"ast":null,"code":"var _jsxFileName = \"/Users/kim/Desktop/dumb_donuts/frontend_base_dapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Div, StyleReset, ThemeProvider, Button, Text, Container, Section } from \"atomize\";\nimport Counter from \"./components/counter\";\nimport Welcome from \"./components/welcome\";\nimport Header from \"./components/header\";\nimport Description from \"./components/description\";\nimport GIF from \"./components/gif\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst debug = process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine(); // Create a client engine instance\n\nconst engine = new Styletron();\nconst theme = {\n  colors: {\n    black900: \"#1d1d1e\"\n  },\n  grid: {\n    colCount: 2,\n    gutterWidth: 0\n  }\n};\n\nfunction App() {\n  _s();\n\n  // blockchain stuff\n  const dispatch = useDispatch();\n  const blockchain = useSelector(state => state.blockchain);\n  const totalsupply = blockchain.total;\n  const data = useSelector(state => state.data);\n  const [feedback, setFeedback] = useState(\"Maybe it's your lucky day!\");\n  const [mintingNFT, setMintingNFT] = useState(false);\n\n  const mintNFTS = _amount => {\n    setMintingNFT(true);\n    blockchain.dumbDonuts.methods.mint(blockchain.account, _amount).send({\n      from: blockchain.account,\n      value: blockchain.web3.utils.toWei((0.01 * _amount).toString(), \"ether\")\n    }).once(\"error\", err => {\n      console.log(err);\n      setFeedback(\"Error\");\n      setMintingNFT(false);\n    }).then(receipt => {\n      setFeedback(\"Success\");\n      setMintingNFT(false);\n    });\n  };\n\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.dumbDonuts !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.dumbDonuts, dispatch]);\n  return /*#__PURE__*/_jsxDEV(StyletronProvider, {\n    value: engine,\n    debug: debug,\n    debugAfterHydration: true,\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(StyleReset, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Div, {\n        children: blockchain.account === \"\" || blockchain.dumbDonuts === null ? /*#__PURE__*/_jsxDEV(Div, {\n          d: \"flex\",\n          justify: \"center\",\n          align: \"center\",\n          minH: \"100vh\",\n          w: \"100vw\",\n          flexDir: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(Welcome, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            align: \"center\",\n            top: \"1rem\",\n            m: {\n              b: \"40px\"\n            },\n            shadow: \"3\",\n            hoverShadow: \"4\",\n            rounded: \"circle\",\n            onClick: e => {\n              e.preventDefault();\n              dispatch(connect());\n            },\n            children: \"Connect\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), blockchain.errorMsg !== \"\" ? /*#__PURE__*/_jsxDEV(Text, {\n            textAlign: \"center\",\n            children: blockchain.errorMsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 46\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Div, {\n          d: \"flex\",\n          justify: \"center\",\n          align: \"center\",\n          minH: \"100vh\",\n          w: \"100vw\",\n          flexDir: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(GIF, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Description, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: totalsupply\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            align: \"center\",\n            hoverBg: \"gray800\",\n            bg: \"black900\",\n            shadow: \"3\",\n            hoverShadow: \"4\",\n            rounded: \"circle\",\n            disabled: mintingNFT ? 1 : 0,\n            onClick: e => {\n              e.preventDefault();\n              mintNFTS(1);\n            },\n            children: mintingNFT ? \"Minting\" : \"Mint\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"7irxt01rN+u8dbNm/bWim91CRvE=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kim/Desktop/dumb_donuts/frontend_base_dapp/src/App.js"],"names":["React","useEffect","useState","useDispatch","useSelector","connect","fetchData","Provider","StyletronProvider","DebugEngine","Client","Styletron","Div","StyleReset","ThemeProvider","Button","Text","Container","Section","Counter","Welcome","Header","Description","GIF","debug","process","env","NODE_ENV","engine","theme","colors","black900","grid","colCount","gutterWidth","App","dispatch","blockchain","state","totalsupply","total","data","feedback","setFeedback","mintingNFT","setMintingNFT","mintNFTS","_amount","dumbDonuts","methods","mint","account","send","from","value","web3","utils","toWei","toString","once","err","console","log","then","receipt","b","e","preventDefault","errorMsg"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Div, StyleReset, ThemeProvider, Button, Text, Container, Section } from \"atomize\";\nimport Counter from \"./components/counter\"\nimport Welcome from \"./components/welcome\";\nimport Header from \"./components/header\"\nimport Description from \"./components/description\"\nimport GIF from \"./components/gif\"\n\n\nconst debug =\n  process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine();\n\n// Create a client engine instance\nconst engine = new Styletron();\n\nconst theme = {\n  colors: {\n    black900: \"#1d1d1e\"\n  },\n  grid: {\n    colCount: 2,\n    gutterWidth: 0\n  }\n};\n\nfunction App() {\n\n  // blockchain stuff\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const totalsupply = blockchain.total;\n  const data = useSelector((state) => state.data);\n  const [feedback, setFeedback] = useState(\"Maybe it's your lucky day!\")\n  const [mintingNFT, setMintingNFT] = useState(false)\n  \n  const mintNFTS = (_amount) => {\n    setMintingNFT(true);\n    blockchain.dumbDonuts.methods.mint(blockchain.account, _amount).send({\n      from: blockchain.account,\n      value: blockchain.web3.utils.toWei((0.01 * _amount).toString(), \"ether\"),\n    })\n    .once(\"error\", (err) => {\n      console.log(err);\n      setFeedback(\"Error\");\n      setMintingNFT(false);\n    })\n    .then((receipt) => {\n      setFeedback(\"Success\");\n      setMintingNFT(false);\n    });\n  };\n\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.dumbDonuts !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.dumbDonuts, dispatch]);\n\n  \n  return (\n\n    <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n      <ThemeProvider theme={theme}>\n        <StyleReset />\n        <Div>\n          {blockchain.account === \"\" || blockchain.dumbDonuts === null ? (\n            <Div \n            d=\"flex\" \n            justify=\"center\" \n            align=\"center\" \n            minH=\"100vh\" \n            w=\"100vw\" \n            flexDir=\"column\"\n            >\n              <Welcome />\n              <Button\n                  align=\"center\"\n                  top=\"1rem\"\n                  m={{ b: \"40px\" }}\n                  shadow=\"3\"\n                  hoverShadow=\"4\"\n                  rounded=\"circle\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    dispatch(connect());\n                  }}\n                >\n              Connect\n              </Button>\n              {blockchain.errorMsg !== \"\" ? (<Text textAlign=\"center\">{blockchain.errorMsg}</Text>) : null}\n            </Div>\n          ) : (\n            <Div \n            d=\"flex\" \n            justify=\"center\" \n            align=\"center\" \n            minH=\"100vh\" \n            w=\"100vw\" \n            flexDir=\"column\"\n            >\n              <Header />\n              <GIF />\n              <Description />\n              <Text>{totalsupply}</Text>\n              <Counter />\n              <Button\n                  align=\"center\"\n                  hoverBg=\"gray800\"\n                  bg=\"black900\"\n                  shadow=\"3\"\n                  hoverShadow=\"4\"\n                  rounded=\"circle\"\n                  disabled={mintingNFT ? 1 : 0}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    mintNFTS(1);\n                  }}\n                >\n                {mintingNFT ? \"Minting\" : \"Mint\"}\n                </Button>\n            </Div>\n          )\n          }\n        </Div>\n      </ThemeProvider>\n    </StyletronProvider>\n  );\n  }\n  \nexport default App;"]},"metadata":{},"sourceType":"module"}