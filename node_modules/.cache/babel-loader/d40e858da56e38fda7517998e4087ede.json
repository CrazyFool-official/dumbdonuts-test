{"ast":null,"code":"var _jsxFileName = \"/Users/kim/Desktop/dumb_donuts/frontend_base_dapp/src/App.js\";\nimport React, { useEffect, useState, useRef, Component } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport styled from \"styled-components\";\nimport { create } from \"ipfs-http-client\";\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Div, StyleReset, ThemeProvider } from \"atomize\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst debug = process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine(); // 1. Create a client engine instance\n\nconst engine = new Styletron();\nconst theme = {\n  colors: {\n    black900: \"#1d1d1e\"\n  }\n};\n\nclass App extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(StyletronProvider, {\n      value: engine,\n      debug: debug,\n      debugAfterHydration: true,\n      children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n        theme: theme,\n        children: [/*#__PURE__*/_jsxDEV(StyleReset, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Div, {\n          textColor: \"black900\",\n          minH: \"100vh\",\n          w: \"100vw\",\n          d: \"flex\",\n          flexDir: \"column\",\n          justify: \"center\",\n          align: \"center\",\n          textSize: \"display2\",\n          fontFamily: \"secondary\",\n          textWeight: \"500\",\n          p: {\n            x: \"1rem\",\n            y: \"4rem\"\n          },\n          children: \"Start from here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;\n/*\nreturn (\n  <s.Screen>\n    {blockchain.account === \"\" || blockchain.dumbDonuts === null ? (\n      <s.Container flex={1} ai={\"center\"} jc={\"center\"}>\n        <s.TextTitle>Dumb Donuts</s.TextTitle>\n        <s.SpacerSmall />\n        <StyledButton\n          onClick={(e) => {\n            e.preventDefault();\n            dispatch(connect());\n          }}\n        >\n          Connect to MetaMask\n        </StyledButton>\n        <s.SpacerSmall />\n        {blockchain.errorMsg !== \"\" ? (\n          <s.TextDescription>{blockchain.errorMsg}</s.TextDescription>\n        ) : null}\n      </s.Container>\n    ) : (\n      <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n        <s.TextTitle style={{ textAlign: \"center\" }}>\n          {data.name}\n        </s.TextTitle>\n      </s.Container>\n    )}\n  </s.Screen>\n);\n*/","map":{"version":3,"sources":["/Users/kim/Desktop/dumb_donuts/frontend_base_dapp/src/App.js"],"names":["React","useEffect","useState","useRef","Component","useDispatch","useSelector","connect","fetchData","styled","create","Provider","StyletronProvider","DebugEngine","Client","Styletron","Div","StyleReset","ThemeProvider","debug","process","env","NODE_ENV","engine","theme","colors","black900","App","render","x","y"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,sCAAxB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAQ,IAAIC,iBAArB,EAAwCC,WAAxC,QAA2D,iBAA3D;AACA,SAASC,MAAM,IAAIC,SAAnB,QAAoC,yBAApC;AACA,SAASC,GAAT,EAAcC,UAAd,EAA0BC,aAA1B,QAA+C,SAA/C;;AAEA,MAAMC,KAAK,GACTC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,KAAK,CAA7C,GAAiD,IAAIT,WAAJ,EADnD,C,CAGA;;AACA,MAAMU,MAAM,GAAG,IAAIR,SAAJ,EAAf;AAEA,MAAMS,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE;AADJ;AADI,CAAd;;AAUA,MAAMC,GAAN,SAAkBvB,SAAlB,CAA4B;AAI1BwB,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,iBAAD;AAAmB,MAAA,KAAK,EAAEL,MAA1B;AAAkC,MAAA,KAAK,EAAEJ,KAAzC;AAAgD,MAAA,mBAAmB,MAAnE;AAAA,6BACE,QAAC,aAAD;AAAe,QAAA,KAAK,EAAEK,KAAtB;AAAA,gCACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,GAAD;AACE,UAAA,SAAS,EAAC,UADZ;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,CAAC,EAAC,OAHJ;AAIE,UAAA,CAAC,EAAC,MAJJ;AAKE,UAAA,OAAO,EAAC,QALV;AAME,UAAA,OAAO,EAAC,QANV;AAOE,UAAA,KAAK,EAAC,QAPR;AAQE,UAAA,QAAQ,EAAC,UARX;AASE,UAAA,UAAU,EAAC,WATb;AAUE,UAAA,UAAU,EAAC,KAVb;AAWE,UAAA,CAAC,EAAE;AAAEK,YAAAA,CAAC,EAAE,MAAL;AAAaC,YAAAA,CAAC,EAAE;AAAhB,WAXL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAsBD;;AA3ByB;;AA8B5B,eAAeH,GAAf;AAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useState, useRef, Component } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport styled from \"styled-components\";\nimport { create } from \"ipfs-http-client\";\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Div, StyleReset, ThemeProvider } from \"atomize\";\n\nconst debug =\n  process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine();\n\n// 1. Create a client engine instance\nconst engine = new Styletron();\n\nconst theme = {\n  colors: {\n    black900: \"#1d1d1e\"\n  }\n};\n\n\n\n\n\nclass App extends Component {\n\n  \n\n  render() {\n    return (\n      <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n        <ThemeProvider theme={theme}>\n          <StyleReset />\n          <Div\n            textColor=\"black900\"\n            minH=\"100vh\"\n            w=\"100vw\"\n            d=\"flex\"\n            flexDir=\"column\"\n            justify=\"center\"\n            align=\"center\"\n            textSize=\"display2\"\n            fontFamily=\"secondary\"\n            textWeight=\"500\"\n            p={{ x: \"1rem\", y: \"4rem\" }}\n          >\n            Start from here\n          </Div>\n        </ThemeProvider>\n      </StyletronProvider>\n    );\n  }\n}\n\nexport default App;\n\n  /*\n  return (\n    <s.Screen>\n      {blockchain.account === \"\" || blockchain.dumbDonuts === null ? (\n        <s.Container flex={1} ai={\"center\"} jc={\"center\"}>\n          <s.TextTitle>Dumb Donuts</s.TextTitle>\n          <s.SpacerSmall />\n          <StyledButton\n            onClick={(e) => {\n              e.preventDefault();\n              dispatch(connect());\n            }}\n          >\n            Connect to MetaMask\n          </StyledButton>\n          <s.SpacerSmall />\n          {blockchain.errorMsg !== \"\" ? (\n            <s.TextDescription>{blockchain.errorMsg}</s.TextDescription>\n          ) : null}\n        </s.Container>\n      ) : (\n        <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n          <s.TextTitle style={{ textAlign: \"center\" }}>\n            {data.name}\n          </s.TextTitle>\n        </s.Container>\n      )}\n    </s.Screen>\n  );\n  */\n"]},"metadata":{},"sourceType":"module"}