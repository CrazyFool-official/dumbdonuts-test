{"ast":null,"code":"import _regeneratorRuntime from\"/Users/kim/Desktop/dumb_donuts/dumbdonuts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/kim/Desktop/dumb_donuts/dumbdonuts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// constants\nimport Web3 from\"web3\";import DumbDonuts from\"../../contracts/DumbDonuts.json\";// log\nimport{fetchData}from\"../data/dataActions\";var connectRequest=function connectRequest(){return{type:\"CONNECTION_REQUEST\"};};var connectSuccess=function connectSuccess(payload){return{type:\"CONNECTION_SUCCESS\",payload:payload};};var connectFailed=function connectFailed(payload){return{type:\"CONNECTION_FAILED\",payload:payload};};var updateAccountRequest=function updateAccountRequest(payload){return{type:\"UPDATE_ACCOUNT\",payload:payload};};export var connect=function connect(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var web3,accounts,networkId,SmartContractObj;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(connectRequest());if(!window.ethereum){_context.next=18;break;}web3=new Web3(window.ethereum);_context.prev=3;_context.next=6;return window.ethereum.request({method:\"eth_requestAccounts\"});case 6:accounts=_context.sent;_context.next=9;return window.ethereum.request({method:\"net_version\"});case 9:networkId=_context.sent;//const NetworkData = await DumbDonuts.networks[networkId];\nif(networkId==4){SmartContractObj=new web3.eth.Contract(DumbDonuts.abi,//NetworkData.address\n\"0x48d3f35228e2387dd97d07d7fb53f51d59c4d4ca\");dispatch(connectSuccess({account:accounts[0],dumbDonuts:SmartContractObj,web3:web3}));// Add listeners start\nwindow.ethereum.on(\"accountsChanged\",function(accounts){dispatch(updateAccount(accounts[0]));});window.ethereum.on(\"chainChanged\",function(){window.location.reload();});// Add listeners end\n}else{dispatch(connectFailed(\"Connection error. Refresh or connect to Ethereum Mainnet and try again.\"));}_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](3);dispatch(connectFailed(\"Something went wrong.\"));case 16:_context.next=19;break;case 18:dispatch(connectFailed(\"Install Metamask.\"));case 19:case\"end\":return _context.stop();}}},_callee,null,[[3,13]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var updateAccount=function updateAccount(account){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch(updateAccountRequest({account:account}));dispatch(fetchData(account));case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/redux/blockchain/blockchainActions.js"],"names":["Web3","DumbDonuts","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","window","ethereum","web3","request","method","accounts","networkId","SmartContractObj","eth","Contract","abi","account","dumbDonuts","on","updateAccount","location","reload"],"mappings":"6TAAA;AACA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CACA,MAAOC,CAAAA,UAAP,KAAuB,iCAAvB,CACA;AACA,OAASC,SAAT,KAA0B,qBAA1B,CAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,MAAO,CACLC,IAAI,CAAE,oBADD,CAAP,CAGD,CAJD,CAMA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,OAAD,CAAa,CAClC,MAAO,CACLF,IAAI,CAAE,oBADD,CAELE,OAAO,CAAEA,OAFJ,CAAP,CAID,CALD,CAOA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACD,OAAD,CAAa,CACjC,MAAO,CACLF,IAAI,CAAE,mBADD,CAELE,OAAO,CAAEA,OAFJ,CAAP,CAID,CALD,CAOA,GAAME,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACF,OAAD,CAAa,CACxC,MAAO,CACLF,IAAI,CAAE,gBADD,CAELE,OAAO,CAAEA,OAFJ,CAAP,CAID,CALD,CAOA,MAAO,IAAMG,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CAC3B,+FAAO,iBAAOC,QAAP,+JACLA,QAAQ,CAACP,cAAc,EAAf,CAAR,CADK,IAEDQ,MAAM,CAACC,QAFN,0BAGCC,IAHD,CAGQ,GAAIb,CAAAA,IAAJ,CAASW,MAAM,CAACC,QAAhB,CAHR,uCAKsBD,CAAAA,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB,CAC7CC,MAAM,CAAE,qBADqC,CAAxB,CALtB,QAKKC,QALL,qCAQuBL,CAAAA,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB,CAC9CC,MAAM,CAAE,aADsC,CAAxB,CARvB,QAQKE,SARL,eAWD;AACA,GAAIA,SAAS,EAAI,CAAjB,CAAoB,CACZC,gBADY,CACO,GAAIL,CAAAA,IAAI,CAACM,GAAL,CAASC,QAAb,CACvBnB,UAAU,CAACoB,GADY,CAEvB;AACA,4CAHuB,CADP,CAMlBX,QAAQ,CACNL,cAAc,CAAC,CACbiB,OAAO,CAAEN,QAAQ,CAAC,CAAD,CADJ,CAEbO,UAAU,CAAEL,gBAFC,CAGbL,IAAI,CAAEA,IAHO,CAAD,CADR,CAAR,CAOA;AACAF,MAAM,CAACC,QAAP,CAAgBY,EAAhB,CAAmB,iBAAnB,CAAsC,SAACR,QAAD,CAAc,CAClDN,QAAQ,CAACe,aAAa,CAACT,QAAQ,CAAC,CAAD,CAAT,CAAd,CAAR,CACD,CAFD,EAGAL,MAAM,CAACC,QAAP,CAAgBY,EAAhB,CAAmB,cAAnB,CAAmC,UAAM,CACvCb,MAAM,CAACe,QAAP,CAAgBC,MAAhB,GACD,CAFD,EAGA;AACD,CArBD,IAqBO,CACLjB,QAAQ,CAACH,aAAa,CAAC,yEAAD,CAAd,CAAR,CACD,CAnCA,iFAqCDG,QAAQ,CAACH,aAAa,CAAC,uBAAD,CAAd,CAAR,CArCC,uCAwCHG,QAAQ,CAACH,aAAa,CAAC,mBAAD,CAAd,CAAR,CAxCG,qEAAP,+DA2CD,CA5CM,CA8CP,MAAO,IAAMkB,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACH,OAAD,CAAa,CACxC,gGAAO,kBAAOZ,QAAP,sHACLA,QAAQ,CAACF,oBAAoB,CAAC,CAAEc,OAAO,CAAEA,OAAX,CAAD,CAArB,CAAR,CACAZ,QAAQ,CAACR,SAAS,CAACoB,OAAD,CAAV,CAAR,CAFK,wDAAP,iEAID,CALM","sourcesContent":["// constants\nimport Web3 from \"web3\";\nimport DumbDonuts from \"../../contracts/DumbDonuts.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        //const NetworkData = await DumbDonuts.networks[networkId];\n        if (networkId == 4) {\n          const SmartContractObj = new web3.eth.Contract(\n            DumbDonuts.abi,\n            //NetworkData.address\n            \"0x48d3f35228e2387dd97d07d7fb53f51d59c4d4ca\"\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              dumbDonuts: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Connection error. Refresh or connect to Ethereum Mainnet and try again.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}