{"ast":null,"code":"var _jsxFileName = \"/Users/kim/Desktop/dumb_donuts/frontend_base_dapp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef, Component } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Div, StyleReset, ThemeProvider, Button, Text, Container, Section } from \"atomize\";\nimport Counter from \"./components/mint\";\nimport Connect from \"./components/connect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst debug = process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine(); // Create a client engine instance\n\nconst engine = new Styletron();\nconst theme = {\n  colors: {\n    black900: \"#1d1d1e\"\n  }\n};\n\nfunction App() {\n  _s();\n\n  // blockchain stuff\n  const dispatch = useDispatch();\n  const blockchain = useSelector(state => state.blockchain);\n  const data = useSelector(state => state.data);\n  const [feedback, setFeedback] = useState(\"Maybe it's your lucky day!\");\n  const [mintingNFT, setMintingNFT] = useState(false);\n\n  const mintNFTS = _amount => {\n    setMintingNFT(true);\n    blockchain.dumbDonuts.methods.mint(blockchain.account, _amount).send({\n      from: blockchain.account,\n      value: blockchain.web3.utils.toWei((0.01 * _amount).toString(), \"ether\")\n    }).once(\"error\", err => {\n      console.log(err);\n      setFeedback(\"Error\");\n      setMintingNFT(false);\n    }).then(receipt => {\n      setFeedback(\"Success\");\n      setMintingNFT(false);\n    });\n  };\n\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.dumbDonuts, dispatch]);\n  /*\n  return (\n     <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n      <ThemeProvider theme={theme}>\n        <StyleReset />\n        {blockchain.account === \"\" || blockchain.dumbDonuts === null ? (\n          <Connect />\n        ) :\n       </ThemeProvider>\n    </StyletronProvider>\n   );\n  */\n\n  return /*#__PURE__*/_jsxDEV(StyletronProvider, {\n    value: engine,\n    debug: debug,\n    debugAfterHydration: true,\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(StyleReset, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Div, {\n        children: blockchain.account === \"\" || blockchain.dumbDonuts === null ? /*#__PURE__*/_jsxDEV(Div, {\n          d: \"flex\",\n          justify: \"center\",\n          align: \"center\",\n          minH: \"100vh\",\n          w: \"100vw\",\n          flexDir: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            textSize: \"display2\",\n            textWeight: \"600\",\n            children: \"Welcome to Dumb Donuts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            align: \"center\",\n            top: \"2rem\",\n            shadow: \"3\",\n            hoverShadow: \"4\",\n            rounded: \"circle\",\n            onClick: e => {\n              e.preventDefault();\n              dispatch(connect());\n            },\n            children: \"Connect\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), blockchain.errorMsg !== \"\" ? /*#__PURE__*/_jsxDEV(Text, {\n            children: blockchain.errorMsg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Div, {\n          d: \"flex\",\n          justify: \"center\",\n          align: \"center\",\n          minH: \"100vh\",\n          w: \"100vw\",\n          flexDir: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            textSize: \"display2\",\n            textWeight: \"600\",\n            children: \"Dumb Donuts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: \"Dumb Donuts is a collection of NFTs (unique digital collectibles) based on the works of CryptoPunks and Weird Whales.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: \"10,000 donuts have been generated from a buffet of combinations, each with unique traits.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: \"Treat yourself to a dumb donut today!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            top: \"2rem\",\n            align: \"center\",\n            shadow: \"3\",\n            hoverShadow: \"4\",\n            rounded: \"circle\",\n            disabled: mintingNFT ? 1 : 0,\n            onClick: e => {\n              e.preventDefault();\n              mintNFTS(1);\n            },\n            children: mintingNFT ? \"Minting\" : \"Mint\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"7irxt01rN+u8dbNm/bWim91CRvE=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/kim/Desktop/dumb_donuts/frontend_base_dapp/src/App.js"],"names":["React","useEffect","useState","useRef","Component","useDispatch","useSelector","connect","fetchData","Provider","StyletronProvider","DebugEngine","Client","Styletron","Div","StyleReset","ThemeProvider","Button","Text","Container","Section","Counter","Connect","debug","process","env","NODE_ENV","engine","theme","colors","black900","App","dispatch","blockchain","state","data","feedback","setFeedback","mintingNFT","setMintingNFT","mintNFTS","_amount","dumbDonuts","methods","mint","account","send","from","value","web3","utils","toWei","toString","once","err","console","log","then","receipt","smartContract","e","preventDefault","errorMsg"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef, Component } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Div, StyleReset, ThemeProvider, Button, Text, Container, Section } from \"atomize\";\nimport Counter from \"./components/mint\"\nimport Connect from \"./components/connect\";\n\n\nconst debug =\n  process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine();\n\n// Create a client engine instance\nconst engine = new Styletron();\n\nconst theme = {\n  colors: {\n    black900: \"#1d1d1e\"\n  }\n};\n\nfunction App() {\n\n  // blockchain stuff\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n  const [feedback, setFeedback] = useState(\"Maybe it's your lucky day!\")\n  const [mintingNFT, setMintingNFT] = useState(false)\n  \n  const mintNFTS = (_amount) => {\n    setMintingNFT(true);\n    blockchain.dumbDonuts.methods.mint(blockchain.account, _amount).send({\n      from: blockchain.account,\n      value: blockchain.web3.utils.toWei((0.01 * _amount).toString(), \"ether\"),\n    })\n    .once(\"error\", (err) => {\n      console.log(err);\n      setFeedback(\"Error\");\n      setMintingNFT(false);\n    })\n    .then((receipt) => {\n      setFeedback(\"Success\");\n      setMintingNFT(false);\n    });\n  };\n\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.dumbDonuts, dispatch]);\n\n  /*\n  return (\n\n    <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n      <ThemeProvider theme={theme}>\n        <StyleReset />\n        {blockchain.account === \"\" || blockchain.dumbDonuts === null ? (\n          <Connect />\n        ) :\n\n      </ThemeProvider>\n    </StyletronProvider>\n\n  );\n  */\n\n  \n  return (\n    <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n        <ThemeProvider theme={theme}>\n          <StyleReset />\n          <Div>\n            {blockchain.account === \"\" || blockchain.dumbDonuts === null ? (\n              <Div d=\"flex\" justify=\"center\" align=\"center\" minH=\"100vh\" w=\"100vw\" flexDir=\"column\">\n                <Text textSize=\"display2\" textWeight=\"600\">Welcome to Dumb Donuts</Text>\n                <Button\n                  align=\"center\"\n                  top=\"2rem\"\n                  shadow=\"3\"\n                  hoverShadow=\"4\"\n                  rounded=\"circle\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    dispatch(connect());\n                  }}\n                >\n                Connect\n                </Button>\n                {blockchain.errorMsg !== \"\" ? (\n                <Text>{blockchain.errorMsg}</Text>\n                ) : null}\n          </Div>\n      ) : (\n        <Div d=\"flex\" justify=\"center\" align=\"center\" minH=\"100vh\" w=\"100vw\" flexDir=\"column\">\n          <Text textSize=\"display2\" textWeight=\"600\">Dumb Donuts</Text>\n          <Text>Dumb Donuts is a collection of NFTs (unique digital collectibles) based on the works of CryptoPunks and Weird Whales.</Text>\n          <Text>10,000 donuts have been generated from a buffet of combinations, each with unique traits.</Text>\n          <Text>Treat yourself to a dumb donut today!</Text>\n          <Button\n                  top=\"2rem\"\n                  align=\"center\"\n                  shadow=\"3\"\n                  hoverShadow=\"4\"\n                  rounded=\"circle\"\n                  disabled={mintingNFT ? 1 : 0}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    mintNFTS(1);\n                  }}\n                >\n                {mintingNFT ? \"Minting\" : \"Mint\"}\n                </Button>\n        </Div>\n      )}\n    </Div>\n        </ThemeProvider>\n    </StyletronProvider>\n  ); \n\n}\n\nexport default App;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}