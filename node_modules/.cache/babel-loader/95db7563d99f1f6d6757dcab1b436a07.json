{"ast":null,"code":"import React, { useEffect, useState, useRef, Component } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport styled from \"styled-components\";\nimport { create } from \"ipfs-http-client\";\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nconst debug = process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine(); // 1. Create a client engine instance\n\nconst engine = new Styletron();\nimport { Div, StyleReset, ThemeProvider } from \"atomize\";\nconst theme = {\n  colors: {\n    black900: \"#1d1d1e\"\n  }\n};\n/*\nconst dispatch = useDispatch();\nconst blockchain = useSelector((state) => state.blockchain);\nconst data = useSelector((state) => state.data);\n\nuseEffect(() => {\n  if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n    dispatch(fetchData(blockchain.account));\n  }\n}, [blockchain.dumbDonuts, dispatch]);\n\nclass App extends Component {\n\n  render() {\n    return (\n      <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n        <ThemeProvider theme={theme}>\n          <StyleReset />\n          <Div\n            textColor=\"black900\"\n            minH=\"100vh\"\n            w=\"100vw\"\n            d=\"flex\"\n            flexDir=\"column\"\n            justify=\"center\"\n            align=\"center\"\n            textSize=\"display2\"\n            fontFamily=\"secondary\"\n            textWeight=\"500\"\n            p={{ x: \"1rem\", y: \"4rem\" }}\n          >\n            Start from here\n          </Div>\n        </ThemeProvider>\n      </StyletronProvider>\n    );\n  }\n}\n\nexport default App;\n\n  /*\n  return (\n    <s.Screen>\n      {blockchain.account === \"\" || blockchain.dumbDonuts === null ? (\n        <s.Container flex={1} ai={\"center\"} jc={\"center\"}>\n          <s.TextTitle>Dumb Donuts</s.TextTitle>\n          <s.SpacerSmall />\n          <StyledButton\n            onClick={(e) => {\n              e.preventDefault();\n              dispatch(connect());\n            }}\n          >\n            Connect to MetaMask\n          </StyledButton>\n          <s.SpacerSmall />\n          {blockchain.errorMsg !== \"\" ? (\n            <s.TextDescription>{blockchain.errorMsg}</s.TextDescription>\n          ) : null}\n        </s.Container>\n      ) : (\n        <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n          <s.TextTitle style={{ textAlign: \"center\" }}>\n            {data.name}\n          </s.TextTitle>\n        </s.Container>\n      )}\n    </s.Screen>\n  );\n  */","map":{"version":3,"sources":["/Users/kim/Desktop/dumb_donuts/frontend_base_dapp/src/App.js"],"names":["React","useEffect","useState","useRef","Component","useDispatch","useSelector","connect","fetchData","styled","create","Provider","StyletronProvider","DebugEngine","Client","Styletron","debug","process","env","NODE_ENV","engine","Div","StyleReset","ThemeProvider","theme","colors","black900"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,sCAAxB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAQ,IAAIC,iBAArB,EAAwCC,WAAxC,QAA2D,iBAA3D;AACA,SAASC,MAAM,IAAIC,SAAnB,QAAoC,yBAApC;AAEA,MAAMC,KAAK,GACTC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,KAAK,CAA7C,GAAiD,IAAIN,WAAJ,EADnD,C,CAGA;;AACA,MAAMO,MAAM,GAAG,IAAIL,SAAJ,EAAf;AAEA,SAASM,GAAT,EAAcC,UAAd,EAA0BC,aAA1B,QAA+C,SAA/C;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE;AADJ;AADI,CAAd;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useState, useRef, Component } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport styled from \"styled-components\";\nimport { create } from \"ipfs-http-client\";\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\n\nconst debug =\n  process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine();\n\n// 1. Create a client engine instance\nconst engine = new Styletron();\n\nimport { Div, StyleReset, ThemeProvider } from \"atomize\";\n\nconst theme = {\n  colors: {\n    black900: \"#1d1d1e\"\n  }\n};\n\n/*\nconst dispatch = useDispatch();\nconst blockchain = useSelector((state) => state.blockchain);\nconst data = useSelector((state) => state.data);\n\nuseEffect(() => {\n  if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n    dispatch(fetchData(blockchain.account));\n  }\n}, [blockchain.dumbDonuts, dispatch]);\n\nclass App extends Component {\n\n  render() {\n    return (\n      <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n        <ThemeProvider theme={theme}>\n          <StyleReset />\n          <Div\n            textColor=\"black900\"\n            minH=\"100vh\"\n            w=\"100vw\"\n            d=\"flex\"\n            flexDir=\"column\"\n            justify=\"center\"\n            align=\"center\"\n            textSize=\"display2\"\n            fontFamily=\"secondary\"\n            textWeight=\"500\"\n            p={{ x: \"1rem\", y: \"4rem\" }}\n          >\n            Start from here\n          </Div>\n        </ThemeProvider>\n      </StyletronProvider>\n    );\n  }\n}\n\nexport default App;\n\n  /*\n  return (\n    <s.Screen>\n      {blockchain.account === \"\" || blockchain.dumbDonuts === null ? (\n        <s.Container flex={1} ai={\"center\"} jc={\"center\"}>\n          <s.TextTitle>Dumb Donuts</s.TextTitle>\n          <s.SpacerSmall />\n          <StyledButton\n            onClick={(e) => {\n              e.preventDefault();\n              dispatch(connect());\n            }}\n          >\n            Connect to MetaMask\n          </StyledButton>\n          <s.SpacerSmall />\n          {blockchain.errorMsg !== \"\" ? (\n            <s.TextDescription>{blockchain.errorMsg}</s.TextDescription>\n          ) : null}\n        </s.Container>\n      ) : (\n        <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n          <s.TextTitle style={{ textAlign: \"center\" }}>\n            {data.name}\n          </s.TextTitle>\n        </s.Container>\n      )}\n    </s.Screen>\n  );\n  */\n"]},"metadata":{},"sourceType":"module"}