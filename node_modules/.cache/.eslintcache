[{"/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/index.js":"1","/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/reportWebVitals.js":"2","/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/App.js":"3","/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/redux/store.js":"4","/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/redux/data/dataActions.js":"5","/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/redux/blockchain/blockchainActions.js":"6","/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/redux/data/dataReducer.js":"7","/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/redux/blockchain/blockchainReducer.js":"8","/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/components/description.jsx":"9","/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/components/header.jsx":"10","/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/components/welcome.jsx":"11","/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/components/gif.jsx":"12"},{"size":594,"mtime":1638317577513,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1638141177931,"results":"15","hashOfConfig":"14"},{"size":5884,"mtime":1638487464215,"results":"16","hashOfConfig":"14"},{"size":559,"mtime":1638141177931,"results":"17","hashOfConfig":"14"},{"size":935,"mtime":1638433760213,"results":"18","hashOfConfig":"14"},{"size":2210,"mtime":1638436884801,"results":"19","hashOfConfig":"14"},{"size":706,"mtime":1638433762237,"results":"20","hashOfConfig":"14"},{"size":844,"mtime":1638149514263,"results":"21","hashOfConfig":"14"},{"size":704,"mtime":1638423305297,"results":"22","hashOfConfig":"14"},{"size":722,"mtime":1638487983320,"results":"23","hashOfConfig":"14"},{"size":411,"mtime":1638419786201,"results":"24","hashOfConfig":"14"},{"size":980,"mtime":1638435226525,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"158fgck",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/index.js",[],"/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/reportWebVitals.js",[],"/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/App.js",["52","53"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport { Provider as StyletronProvider, DebugEngine } from \"styletron-react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Div, StyleReset, ThemeProvider, Button, Text, Icon, Anchor } from \"atomize\";\nimport Welcome from \"./components/welcome\";\nimport Header from \"./components/header\"\nimport GIF from \"./components/gif\"\nimport Description from \"./components/description\"\n\n\n\nconst debug =\n  process.env.NODE_ENV === \"production\" ? void 0 : new DebugEngine();\n\n// Create a client engine instance\nconst engine = new Styletron();\n\nconst theme = {\n  colors: {\n    black900: \"#1d1d1e\"\n  }\n};\n\nfunction App() {\n\n  // counting\n  const [count, setCount] = useState(0);\n\n  // blockchain stuff\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n  const [mintingNFT, setMintingNFT] = useState(false);\n\n  const mintNFTS = (_amount) => {\n    setMintingNFT(true);\n    blockchain.dumbDonuts.methods.mint(blockchain.account, _amount).send({\n      from: blockchain.account,\n      value: blockchain.web3.utils.toWei((0.01 * _amount).toString(), \"ether\"),\n    })\n    .once(\"error\", (err) => {\n      console.log(err);\n      alert(\"Error\");\n      setMintingNFT(false);\n    })\n    .then((receipt) => {\n      alert(\"Minted successfully!\");\n      setMintingNFT(false);\n    });\n  };\n\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.dumbDonuts !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.dumbDonuts, dispatch]);\n\n  \n  \n\n  return (\n\n    <StyletronProvider value={engine} debug={debug} debugAfterHydration>\n      <ThemeProvider theme={theme}>\n        <StyleReset />\n        <Div>\n          {blockchain.account === \"\" || blockchain.dumbDonuts === null ? (\n            <Div \n            d=\"flex\" \n            justify=\"center\" \n            align=\"center\" \n            minH=\"100vh\" \n            w=\"100vw\" \n            flexDir=\"column\"\n            >\n              <Welcome />\n              <Button\n                  align=\"center\"\n                  top=\"1rem\"\n                  m={{ b: \"40px\" }}\n                  hoverBg=\"gray800\"\n                  bg=\"black900\"\n                  shadow=\"3\"\n                  hoverShadow=\"4\"\n                  rounded=\"circle\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    dispatch(connect());\n                  }}\n                >\n              Connect\n              </Button>\n              {blockchain.errorMsg !== \"\" ? (<Text textAlign=\"center\">{blockchain.errorMsg}</Text>) : null}\n            </Div>\n          ) : (\n            <Div \n            d=\"flex\" \n            justify=\"center\" \n            align=\"center\" \n            minH=\"100vh\" \n            w=\"100vw\" \n            flexDir=\"column\"\n            >\n              <Header />\n              <GIF />\n              <Description />\n              <Text textSize=\"title\" textWeight=\"500\" m={{ b: \"40px\" }}>{data.totalSupply}  /  10,000 minted</Text>\n              <Div d=\"flex\" align=\"center\" justify=\"center\" m={{ b: \"40px\" }}>\n                    \n                <Button \n                    h=\"2.5rem\"\n                    w=\"2.5rem\"\n                    hoverBg=\"gray800\"\n                    bg=\"black900\"\n                    rounded=\"circle\"\n                    m={{ r: \"2rem\" }}\n                    shadow=\"3\"\n                    hoverShadow=\"4\"\n                    onClick={() => {count === 0 ? setCount(count) : setCount(count - 1)}}\n                >\n                    <Icon name=\"Minus\" size=\"20px\" color=\"white\"/>\n                </Button>\n\n                <Text\n\n                    w=\"40px\"\n                    m={{ l: \"2rem\", r: \"2rem\" }} \n                    textSize=\"title\" \n                    textWeight=\"600\" \n                    textAlign=\"center\"\n                >\n                {count}\n                </Text>\n\n                <Button \n                    h=\"2.5rem\"\n                    w=\"2.5rem\"\n                    hoverBg=\"gray800\"\n                    bg=\"black900\"\n                    rounded=\"circle\"\n                    m={{ l: \"2rem\" }}\n                    shadow=\"3\"\n                    hoverShadow=\"4\"\n                    onClick={() => {count === 5 ? setCount(count) : setCount(count + 1)}}\n                >\n                    <Icon name=\"Plus\" size=\"20px\" color=\"white\"/>\n                </Button>\n\n              </Div>\n              {data.totalSupply !== 10000 ?\n              <Button\n                  align=\"center\"\n                  hoverBg=\"gray800\"\n                  bg=\"black900\"\n                  shadow=\"3\"\n                  hoverShadow=\"4\"\n                  rounded=\"circle\"\n                  m={{ b: \"80px\" }}\n                  disabled={mintingNFT ? 1 : 0}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    {count === 0 ? alert(\"Error. Amount to be minted cannot be 0.\") : mintNFTS(count)};\n                  }}\n                >\n                {mintingNFT ? \"Minting\" : \"Mint\"}\n                </Button> : \n              <Anchor href=\"https://www.google.com\" target=\"_blank\">\n                <Button\n                  align=\"center\"\n                  m={{ b: \"80px\" }}\n                  hoverBg=\"info400\"\n                  bg=\"info600\"\n                  shadow=\"3\"\n                  hoverShadow=\"4\"\n                  rounded=\"circle\"\n                >\n                View on OpenSea\n                </Button>\n              </Anchor>}\n            </Div>\n          )\n          }\n        </Div>\n      </ThemeProvider>\n    </StyletronProvider>\n  );\n}\n  \nexport default App;","/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/redux/store.js",[],"/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/redux/data/dataActions.js",[],"/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/redux/blockchain/blockchainActions.js",["54"],"// constants\nimport Web3 from \"web3\";\nimport DumbDonuts from \"../../contracts/DumbDonuts.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        //const NetworkData = await DumbDonuts.networks[networkId];\n        if (networkId == 4) {\n          const SmartContractObj = new web3.eth.Contract(\n            DumbDonuts.abi,\n            //NetworkData.address\n            \"0x48d3f35228e2387dd97d07d7fb53f51d59c4d4ca\"\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              dumbDonuts: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Connection error. Refresh or connect to Ethereum Mainnet and try again.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n","/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/redux/data/dataReducer.js",[],"/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/redux/blockchain/blockchainReducer.js",[],"/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/components/description.jsx",[],"/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/components/header.jsx",[],"/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/components/welcome.jsx",[],"/Users/kim/Desktop/dumb_donuts/dumbdonuts/src/components/gif.jsx",[],{"ruleId":"55","severity":1,"message":"56","line":59,"column":6,"nodeType":"57","endLine":59,"endColumn":39,"suggestions":"58"},{"ruleId":"59","severity":1,"message":"60","line":165,"column":21,"nodeType":"61","messageId":"62","endLine":165,"endColumn":103},{"ruleId":"63","severity":1,"message":"64","line":47,"column":23,"nodeType":"65","messageId":"66","endLine":47,"endColumn":25},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'blockchain.account'. Either include it or remove the dependency array.","ArrayExpression",["67"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"68","fix":"69"},"Update the dependencies array to be: [blockchain.account, blockchain.dumbDonuts, dispatch]",{"range":"70","text":"71"},[1757,1790],"[blockchain.account, blockchain.dumbDonuts, dispatch]"]